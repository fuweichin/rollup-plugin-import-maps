import fs from 'fs/promises';
import path from 'path';
import {singleQuote} from '../src/quote.js';

const __dirname = path.resolve('spec');

let fixtureConfig = {
  fixtureDir: 'spec/fixtures',
  fixtureFiles: /\.js$/,
};

let {fixtureDir, fixtureFiles} = fixtureConfig;
fs.readdir(fixtureDir).then((names) => {
  let accepedNames = [];
  names.forEach((name) => {
    if (fixtureFiles.test(name)) {
      accepedNames.push(name);
    }
  });
  return accepedNames;
}).then((names) => {
  if (names.length === 0) {
    console.warn('No fixture files');
  }
  return Promise.all(names.map(async (name) => {
    let file = path.join(fixtureDir, name);
    let relativePath = './' + path.relative(__dirname, file).replace(/\\/g, () => '/');
    let title, disabled;
    if (name.startsWith('-')) {
      title = name.slice(1).replace(/\.js$/, '');
      disabled = true;
    } else {
      title = name.replace(/\.js$/, '');
      disabled = false;
    }
    return {title, relativePath, disabled};
  }));
}).then(genSuiteCode).then((content) => {
  return fs.writeFile(path.join(__dirname, 'fixtures.spec.mjs'), content, {encoding: 'utf-8'});
}).then(() => {
  console.log('done');
}, (err) => {
  console.error(err.stack);
});

function genSuiteCode(fixtures) {
  return `// This file is auto-generated by run-fixtures.mjs
import {readFile as readFileAsync} from 'fs/promises';
import {rollup} from 'rollup';
import {importMapsPlugin} from '../src/index.mjs';

describe('TransformImportMaps', () => {
  ${fixtures.map((fixture) => {
    return `${fixture.disabled ? 'x' : ''}it(${singleQuote(fixture.title)}, async () => {
    let {inputFile, importmapFile, expectedOutputFile, pluginOptions} = (await import(${singleQuote(fixture.relativePath)})).default;
    let bundle = await rollup({
      input: inputFile,
      treeshake: false,
      plugins: [
        importMapsPlugin({
          srcText: await readFileAsync(importmapFile, {encoding: 'utf-8'}),
          ...pluginOptions,
        })
      ],
    });
    let result = await bundle.generate({format: 'es'});
    let output = result.output[0];
    let expectedOutputCode = await readFileAsync(expectedOutputFile, {encoding: 'utf-8'});
    expect(output.code).toEqual(expectedOutputCode);
  });`;
  }).join('\n  ')}
});
`;
}
